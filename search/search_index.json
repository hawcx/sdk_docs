{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-hawcx-documentation","title":"Welcome to Hawcx Documentation","text":"<p>Secure your mobile applications with HawcxAuth - the next-gen passwordless platform for Android developers.</p>"},{"location":"#quick-navigation","title":"Quick Navigation","text":"<ul> <li>Introduction: Learn about Hawcx Authentication and its benefits.</li> <li>Demo Application: Experience Hawcx Authentication in action.</li> <li>Get Started: Set up Hawcx Authentication in your project.</li> </ul>"},{"location":"#android-integration","title":"Android Integration","text":"<ul> <li>Get Started with Android</li> <li>Integrate in Java Application</li> <li>Integrate in React Native Application</li> <li>Integrate in Flutter Application</li> </ul>"},{"location":"#support","title":"Support","text":"<ul> <li>FAQs: Find answers to common questions.</li> <li>Feature Requests: Suggest new features.</li> <li>Feedback / Complaints: Share your thoughts or concerns.</li> <li>Troubleshoot: Solve common integration issues.</li> </ul> <p>Get started with Hawcx Authentication today and take your app's security to the next level!</p>"},{"location":"_separator/","title":"_________________________________________________","text":""},{"location":"demo-application/","title":"Demo Application","text":""},{"location":"demo-application/#demo-application","title":"Demo Application","text":"<p>Experience Hawcx Authentication in action through our demo application. This demo showcases the key features and security capabilities of Hawcx Authentication in a real-world scenario.</p> Get the Code <p>Explore the demo app source</p> Download the App <p>Try the demo on your device</p> \u00d7"},{"location":"demo-application/#features-demonstrated","title":"Features Demonstrated","text":"<p>Our demo application showcases the following key features of Hawcx Authentication:</p> <ol> <li>Secure User Authentication</li> <li>Biometric Login</li> <li>Encrypted Data Storage</li> <li>Secure API Communications</li> <li>Tamper Detection</li> </ol> <p>Explore the demo to see how Hawcx Authentication can enhance the security of your Android application.</p>"},{"location":"faqs/","title":"FAQs","text":""},{"location":"faqs/#frequently-asked-questions-faqs","title":"Frequently Asked Questions (FAQs)","text":""},{"location":"faqs/#general-questions","title":"General Questions","text":"<ol> <li> <p>Q: What is Hawcx Authentication?    A: Hawcx Authentication is a comprehensive security solution for Android applications, providing features like secure authentication, data encryption, and tamper detection.</p> </li> <li> <p>Q: Which Android versions are supported by Hawcx Authentication?    A: Hawcx Authentication supports Android API level 21 (Android 5.0 Lollipop) and above.</p> </li> <li> <p>Q: Can I use Hawcx Authentication in my existing Android project?    A: Yes, Hawcx Authentication can be easily integrated into existing Android projects. See our Existing Project Integration Guide for details.</p> </li> </ol>"},{"location":"faqs/#technical-questions","title":"Technical Questions","text":"<ol> <li> <p>Q: How does Hawcx Authentication handle data encryption?    A: Hawcx Authentication uses industry-standard AES-256 encryption for data at rest and TLS for data in transit.</p> </li> <li> <p>Q: Does Hawcx Authentication support biometric authentication?    A: Yes, Hawcx Authentication provides built-in support for biometric authentication, including fingerprint and face recognition where available.</p> </li> <li> <p>Q: Can I use Hawcx Authentication with other third-party libraries?    A: Yes, Hawcx Authentication is designed to be compatible with most third-party Android libraries. However, always test for any conflicts.</p> </li> </ol>"},{"location":"faqs/#licensing-and-support","title":"Licensing and Support","text":"<ol> <li> <p>Q: Is there a free trial available for Hawcx Authentication?    A: Yes, we offer a 30-day free trial. Contact our sales team for more information.</p> </li> <li> <p>Q: How often is Hawcx Authentication updated?    A: We release updates quarterly, with additional security patches as needed.</p> </li> <li> <p>Q: Is technical support available for Hawcx Authentication?    A: Yes, we provide technical support via email and our developer forum. Enterprise customers also have access to priority phone support.</p> </li> </ol>"},{"location":"faqs/#troubleshooting","title":"Troubleshooting","text":"<ol> <li> <p>Q: What should I do if I encounter an integration error?     A: Check our Troubleshooting Guide for common issues and solutions. If the problem persists, contact our support team.</p> </li> <li> <p>Q: How can I report a security vulnerability?     A: Please report any security vulnerabilities to our dedicated security email: security@hawcx.com. We take all reports seriously and will respond promptly.</p> </li> </ol> <p>For more detailed information, please refer to our documentation or contact our support team.</p>"},{"location":"feature-requests/","title":"Feature Requests","text":""},{"location":"feature-requests/#feature-requests","title":"Feature Requests","text":"<p>We value your input! If you have an idea for a new feature or an improvement to an existing one, please let us know by submitting a feature request.</p> Topic: Name: Email: Description: Submit Request"},{"location":"feature-requests/#guidelines-for-submitting-feature-requests","title":"Guidelines for Submitting Feature Requests","text":"<ol> <li>Be Specific: Clearly describe the feature you're suggesting.</li> <li>Provide Context: Explain why this feature would be useful and how it could be implemented.</li> <li>One Feature per Request: If you have multiple ideas, please submit them separately.</li> </ol> <p>We review all feature requests and greatly appreciate your input in making Hawcx Authentication even better!</p>"},{"location":"feedback/","title":"Feedback / Complaints","text":""},{"location":"feedback/#feedback","title":"Feedback","text":"<p>We value your feedback! Please use the form below to share your thoughts, report issues, or provide any other comments about Hawcx Authentication.</p> Name: Email: Topic: Details: Upload Image / PDF: <p>Drag &amp; Drop files here or click to select</p> Submit Feedback"},{"location":"feedback/#guidelines-for-submitting-feedback","title":"Guidelines for Submitting Feedback","text":"<ol> <li>Be Specific: Provide clear and concise details about your feedback.</li> <li>Include Examples: If reporting an issue, include steps to reproduce it.</li> <li>Suggest Improvements: If possible, include suggestions for how we can address your feedback.</li> </ol> <p>We appreciate your time in helping us improve Hawcx Authentication!</p>"},{"location":"first-steps/","title":"First steps","text":""},{"location":"first-steps/#first-steps-with-hawcx","title":"First Steps with Hawcx","text":"<p>Welcome to the First Steps guide for Hawcx. This comprehensive guide will provide you with a detailed overview of how to integrate and use Hawcx in your Android application. We'll cover key concepts, components, and the integration process to help you get started with implementing robust security measures in your app.</p>"},{"location":"first-steps/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Understanding Hawcx</li> <li>Key Components</li> <li>Integration Process Overview</li> <li>Security Features</li> <li>Best Practices</li> <li>Common Use Cases</li> <li>Troubleshooting</li> <li>Next Steps</li> </ol>"},{"location":"first-steps/#1-understanding-hawcx","title":"1. Understanding Hawcx","text":"<p>Hawcx is a comprehensive security solution designed specifically for Android applications. It provides a robust set of tools and APIs to implement advanced authentication mechanisms, secure data storage, and encrypted communication in your app.</p>"},{"location":"first-steps/#11-core-principles","title":"1.1 Core Principles","text":"<ul> <li>Security First: Every feature in Hawcx is designed with security as the top priority.</li> <li>Ease of Use: While providing advanced security, the framework is designed to be developer-friendly.</li> <li>Compliance: Hawcx helps your app comply with various data protection regulations.</li> </ul>"},{"location":"first-steps/#12-key-benefits","title":"1.2 Key Benefits","text":"<ul> <li>Reduces the risk of data breaches and unauthorized access</li> <li>Simplifies the implementation of complex security features</li> <li>Regularly updated to address the latest security threats</li> <li>Improves user trust with robust security measures</li> </ul>"},{"location":"first-steps/#2-key-components","title":"2. Key Components","text":"<p>Hawcx consists of several key components, each serving a specific security function:</p>"},{"location":"first-steps/#21-signupmanager","title":"2.1 SignUpManager","text":"<ul> <li>Handles the user registration process</li> <li>Implements secure password hashing and storage</li> <li>Manages user profile creation and initial setup</li> </ul>"},{"location":"first-steps/#22-signinmanager","title":"2.2 SignInManager","text":"<ul> <li>Manages user authentication</li> <li>Supports multiple authentication methods (password, biometric, 2FA)</li> <li>Handles session management and token-based authentication</li> </ul>"},{"location":"first-steps/#23-biometricmanager","title":"2.3 BiometricManager","text":"<ul> <li>Provides biometric authentication capabilities</li> <li>Supports fingerprint and facial recognition (where available)</li> <li>Ensures secure storage and usage of biometric data</li> </ul>"},{"location":"first-steps/#24-encryptedsharedpreferencesutil","title":"2.4 EncryptedSharedPreferencesUtil","text":"<ul> <li>Offers secure data storage solutions</li> <li>Encrypts sensitive data before storing</li> <li>Provides easy-to-use APIs for storing and retrieving encrypted data</li> </ul>"},{"location":"first-steps/#25-hawcx-core","title":"2.5 Hawcx Core","text":"<ul> <li>The main class that initializes and manages the framework</li> <li>Coordinates between different components</li> <li>Provides global configuration options</li> </ul>"},{"location":"first-steps/#3-integration-process-overview","title":"3. Integration Process Overview","text":"<p>Integrating Hawcx into your application involves several key steps:</p>"},{"location":"first-steps/#31-setup-and-initialization","title":"3.1 Setup and Initialization","text":"<ol> <li>Add the Hawcx AAR to your project</li> <li>Initialize Hawcx in your Application class</li> <li>Configure API endpoints and other global settings</li> </ol>"},{"location":"first-steps/#32-user-management","title":"3.2 User Management","text":"<ol> <li>Implement user registration using SignUpManager</li> <li>Set up user authentication with SignInManager</li> <li>(Optional) Integrate biometric authentication</li> </ol>"},{"location":"first-steps/#33-data-security","title":"3.3 Data Security","text":"<ol> <li>Use EncryptedSharedPreferencesUtil for storing sensitive data</li> <li>Implement secure communication channels for API calls</li> <li>Set up secure file storage if needed</li> </ol>"},{"location":"first-steps/#34-error-handling-and-logging","title":"3.4 Error Handling and Logging","text":"<ol> <li>Implement proper error handling for all Hawcx operations</li> <li>Set up secure logging mechanisms</li> <li>Create user-friendly error messages</li> </ol>"},{"location":"first-steps/#4-security-features","title":"4. Security Features","text":"<p>Hawcx provides a wide array of security features:</p>"},{"location":"first-steps/#41-authentication","title":"4.1 Authentication","text":"<ul> <li>Multi-factor authentication</li> <li>Biometric authentication</li> <li>Token-based authentication</li> <li>Secure password reset mechanisms</li> </ul>"},{"location":"first-steps/#42-data-protection","title":"4.2 Data Protection","text":"<ul> <li>End-to-end encryption for data in transit</li> <li>Encrypted data storage</li> <li>Secure key management</li> </ul>"},{"location":"first-steps/#43-threat-protection","title":"4.3 Threat Protection","text":"<ul> <li>Anti-tampering measures</li> <li>Runtime application self-protection (RASP)</li> <li>Secure random number generation</li> </ul>"},{"location":"first-steps/#5-best-practices","title":"5. Best Practices","text":"<p>When working with Hawcx, adhere to these best practices:</p> <ol> <li>Always initialize Hawcx before using any of its features</li> <li>Use try-catch blocks when calling Hawcx methods</li> <li>Implement both success and failure scenarios in callback methods</li> <li>Securely store and manage your API keys and other sensitive constants</li> <li>Regularly update Hawcx to ensure you have the latest security features</li> <li>Perform regular security audits of your application</li> <li>Educate your users about security best practices</li> </ol>"},{"location":"first-steps/#6-common-use-cases","title":"6. Common Use Cases","text":"<p>Hawcx can be applied in various scenarios:</p> <ol> <li>Financial Applications: Secure transactions and sensitive financial data</li> <li>Healthcare Apps: Protect patient data and ensure HIPAA compliance</li> <li>Enterprise Applications: Secure corporate data and provide robust authentication</li> <li>Social Media Apps: Protect user privacy and secure communication</li> <li>E-commerce Applications: Secure payment information and user accounts</li> </ol>"},{"location":"first-steps/#7-troubleshooting","title":"7. Troubleshooting","text":"<p>Common issues you might encounter and how to resolve them:</p> <ol> <li>Initialization Errors: Ensure Hawcx is properly added to your project and initialized in the Application class</li> <li>Authentication Failures: Check API endpoints and network connectivity</li> <li>Biometric Errors: Verify device compatibility and user enrollment</li> <li>Data Encryption Issues: Ensure proper key management and storage</li> </ol> <p>For more detailed troubleshooting, refer to our Troubleshooting Guide.</p>"},{"location":"first-steps/#8-next-steps","title":"8. Next Steps","text":"<p>Now that you have a comprehensive understanding of Hawcx, you're ready to start integrating it into your application. Here are your next steps:</p> <ol> <li> <p>If you haven't already, download and add the Hawcx AAR to your project as described in the Get Started guide.</p> </li> <li> <p>For detailed implementation instructions and code examples, refer to the following guides:</p> </li> <li>Java Integration</li> <li>React Integration</li> <li> <p>Flutter Integration</p> </li> <li> <p>Explore the Sample Application to see Hawcx in action.</p> </li> <li> <p>Join our developer community forum to ask questions and share your experiences.</p> </li> <li> <p>Stay updated with our newsletter for the latest security tips and framework updates.</p> </li> </ol> <p>By following these steps and guidelines, you'll be well-equipped to implement robust security measures in your Android application using Hawcx. Remember, security is an ongoing process, so always stay informed about the latest security best practices and regularly update your implementation.</p> <p>Happy coding, and welcome to a more secure mobile development experience with Hawcx!</p>"},{"location":"get-started/","title":"Get Started","text":""},{"location":"get-started/#get-started-with-hawcx","title":"Get Started with Hawcx","text":"<p>Ready to enhance your app's security with Hawcx? Choose the integration method that best suits your project:</p> Integrate in Existing Project <p>Add Hawcx to your current Android app</p> Integrate in New Project <p>Start a new Android project with Hawcx</p> Start from Template <p>Use our pre-configured project template</p>"},{"location":"get-started/#next-steps","title":"Next Steps","text":"<p>After integrating Hawcx, explore our documentation to learn how to:</p> <ol> <li>Implement secure user authentication</li> <li>Enable biometric login</li> <li>Encrypt sensitive data</li> <li>Secure API communications</li> <li>Detect and prevent tampering</li> </ol> <p>For platform-specific integration guides, check out:</p> <ul> <li>Java Integration Guide</li> <li>React Native Integration Guide</li> <li>Flutter Integration Guide</li> </ul> <p>If you encounter any issues during integration, refer to our Troubleshooting Guide or contact our support team.</p>"},{"location":"how-hawcx-works/","title":"How hawcx works","text":""},{"location":"how-hawcx-works/#2-how-does-hawcx-work","title":"2. How does Hawcx Work","text":"<p>Hawcx Authentication employs a multi-layered approach to security, combining several advanced techniques to protect user data and prevent unauthorized access.</p>"},{"location":"how-hawcx-works/#key-components","title":"Key Components:","text":"<ol> <li> <p>Secure Authentication: Hawcx Authentication uses a proprietary authentication protocol that goes beyond traditional username/password systems. It incorporates elements of challenge-response authentication and time-based tokens to ensure that each login attempt is unique and resistant to replay attacks.</p> </li> <li> <p>Biometric Integration: Leveraging the device's built-in biometric capabilities, Hawcx Authentication allows for seamless and secure biometric authentication, adding an extra layer of security without compromising user experience.</p> </li> <li> <p>Encryption: All sensitive data is encrypted using industry-standard AES-256 encryption. Hawcx Authentication handles key generation, rotation, and secure storage, ensuring that even if a device is compromised, the encrypted data remains secure.</p> </li> <li> <p>Secure Communication: Hawcx Authentication implements certificate pinning and robust TLS protocols to ensure that all communication between the app and your servers is secure and resistant to man-in-the-middle attacks.</p> </li> <li> <p>Tamper Detection: The framework includes mechanisms to detect if an app has been tampered with or is running in an unsecured environment, helping to prevent reverse engineering and other forms of attack.</p> </li> </ol> <p></p> <p></p> <p></p>"},{"location":"how-hawcx-works/#workflow","title":"Workflow:","text":"<ol> <li>When a user registers or logs in, Hawcx Authentication generates a unique set of cryptographic keys for that user.</li> <li>These keys are used in combination with server-side challenges to authenticate the user securely.</li> <li>Once authenticated, Hawcx Authentication provides secure storage for session tokens and other sensitive data.</li> <li>All operations involving sensitive data (reading, writing, transmitting) are handled through the Hawcx Authentication, ensuring consistent security measures are applied.</li> </ol> <p>By handling these complex security operations, Hawcx Authentication allows developers to focus on building great features while ensuring their app meets the highest security standards.</p>"},{"location":"introduction/","title":"Introduction","text":""},{"location":"introduction/#introduction-to-hawcx-authentication","title":"Introduction to Hawcx Authentication","text":""},{"location":"introduction/#how-it-works","title":"How It Works","text":"<p>Hawcx offers a self serve passwordless authentication platform that allows you to add an authentication interface to your mobile applications and websites in minutes. The platform provides a range of APIs and tools, along with developers friendly documentation, making it easy to integrate into your existing or new mobile applications. Our first release comes with support for Android Applications usind Java and React native and learn more on what is coming please join our slack channel and/or follow this space. </p> <p></p> <p></p> <ol> <li>When a user registers or logs in, Hawcx Authentication generates a unique set of cryptographic keys for that user.</li> <li>These keys are used in combination with server-side challenges to authenticate the user securely.</li> <li>Once authenticated, Hawcx Authentication provides secure storage for session tokens and other sensitive data.</li> <li>All operations involving sensitive data (reading, writing, transmitting) are handled through the Hawcx Authentication, ensuring consistent security measures are applied.</li> </ol> <p>By handling these complex security operations, Hawcx Authentication allows developers to focus on building great features while ensuring their app meets the highest security standards.</p>"},{"location":"introduction/#key-features","title":"Key Features","text":"<ul> <li>Secure Authentication: Implement multi-factor authentication with ease, including biometric integration.</li> <li>Data Encryption: Protect sensitive data both at rest and in transit using industry-standard encryption protocols.</li> <li>Secure Communication: Ensure all network communications are encrypted and protected against man-in-the-middle attacks.</li> <li>Tamper Detection: Identify and respond to attempts to modify or reverse engineer your application.</li> <li>Secure Storage: Safely store sensitive data such as tokens, keys, and user information.</li> </ul>"},{"location":"introduction/#benefits","title":"Benefits","text":"<ol> <li>Enhanced Security: Protect your users' data from unauthorized access and potential breaches.</li> <li>Compliance: Meet industry standards and regulations for data protection and privacy.</li> <li>User Trust: Build confidence in your application by implementing robust security measures.</li> <li>Time-Saving: Focus on developing your core features while Hawcx Authentication handles security concerns.</li> <li>Flexibility: Easily integrate with various Android development frameworks, including native Java, React Native, and Flutter.</li> </ol>"},{"location":"introduction/#getting-started","title":"Getting Started","text":"<p>Ready to secure your Android application with Hawcx Authentication? Check out our Get Started guide to begin integration, or explore our Demo Application to see Hawcx Authentication in action.</p> <p>Protect your users, secure your data, and build trust in your application with Hawcx Authentication.</p>"},{"location":"sample-application/","title":"Sample application","text":""},{"location":"sample-application/#sample-application","title":"Sample Application","text":"<p>Experience the power of Hawcx Authentication firsthand with our sample application. This section guides you through two options: installing a pre-built APK on your Android device and setting up the sample Java application in Android Studio for a more in-depth exploration.</p>"},{"location":"sample-application/#download-and-install-the-apk","title":"Download and Install the APK","text":"<p>To quickly see Hawcx Authentication in action, you can download and install our pre-built APK on your Android device.</p> <ol> <li> <p>On your Android device, click the following link to download the APK:    Download Hawcx Demo APK</p> </li> <li> <p>Once the download is complete, tap on the downloaded file to begin the installation process.</p> </li> <li> <p>If prompted, allow installation from unknown sources in your device settings.</p> </li> <li> <p>Follow the on-screen instructions to complete the installation.</p> </li> <li> <p>After installation, locate the \"Hawcx Demo\" app on your device and tap to open it.</p> </li> </ol>"},{"location":"sample-application/#set-up-the-sample-java-application","title":"Set Up the Sample Java Application","text":"<p>For developers who want to explore the code and run the sample application in Android Studio, follow these steps:</p> <ol> <li> <p>Ensure you have Android Studio installed on your computer.</p> </li> <li> <p>Open a terminal or command prompt and run the following command to clone the repository: </p> </li> </ol> <p><pre><code>git clone https://github.com/hawcx/authenticator.git\n</code></pre> 3. Launch Android Studio.</p> <ol> <li> <p>Click on \"Open an Existing Project\" and navigate to the directory where you cloned the repository.</p> </li> <li> <p>Select the <code>android_app</code> folder and click \"OK\" to open the project.</p> </li> <li> <p>Once the project is loaded, Android Studio might prompt you to sync the project with Gradle files. If so, click \"Sync Now\".</p> </li> <li> <p>Connect an Android device to your computer or set up an emulator in Android Studio.</p> </li> <li> <p>In Android Studio, click the \"Run\" button (green play icon) or press Shift + F10 to build and run the application.</p> </li> <li> <p>Select your connected device or emulator as the deployment target.</p> </li> <li> <p>The app should now install and launch on your selected device or emulator.</p> </li> </ol>"},{"location":"sample-application/#exploring-the-sample-application","title":"Exploring the Sample Application","text":"<p>The sample application demonstrates key features of Hawcx Authentication, including:</p> <ul> <li>Secure user registration</li> <li>Biometric authentication</li> <li>Encrypted data storage</li> <li>Secure API communication</li> </ul> <p>Feel free to explore the application's functionality and examine the code to see how Hawcx Authentication is integrated and utilized.</p> <p>For any issues or questions about the sample application, please refer to our GitHub repository or contact our support team.</p>"},{"location":"troubleshoot/","title":"Troubleshoot","text":""},{"location":"troubleshoot/#troubleshooting-guide","title":"Troubleshooting Guide","text":"<p>This guide provides solutions for common issues you might encounter while using Hawcx Authentication, along with a comprehensive list of error codes.</p>"},{"location":"troubleshoot/#general-troubleshooting-tips","title":"General Troubleshooting Tips","text":"<ol> <li>Ensure you're using the latest version of Hawcx Authentication.</li> <li>Check that Hawcx Authentication is properly initialized in your application.</li> <li>Verify that all required permissions are set in your AndroidManifest.xml.</li> <li>Review the logcat output for any Hawcx Authentication-related warnings or errors.</li> </ol>"},{"location":"troubleshoot/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"troubleshoot/#issue-hawcx-authentication-not-initializing","title":"Issue: Hawcx Authentication not initializing","text":"<p>Solution: Make sure you're calling <code>Hawcx Authentication.init()</code> in your Application class's <code>onCreate()</code> method.</p>"},{"location":"troubleshoot/#issue-biometric-authentication-not-working","title":"Issue: Biometric authentication not working","text":"<p>Solution: Ensure the device has biometric hardware and that the user has enrolled biometrics.</p>"},{"location":"troubleshoot/#issue-network-requests-failing","title":"Issue: Network requests failing","text":"<p>Solution: Check your internet connection and verify that you're using the correct API endpoints.</p>"},{"location":"troubleshoot/#error-codes","title":"Error Codes","text":"<p>Here's a comprehensive list of Hawcx Authentication error codes and their meanings:</p> Error Code Description Solution HWCX-AUTH-001 User not found Ensure the user is registered HWCX-AUTH-002 Account locked Contact support for account unlock HWCX-CRYPTO-001 Encryption failed Check data format and encryption key HWCX-CRYPTO-002 Decryption failed Verify the encrypted data and key HWCX-NET-001 Network connection error Check internet connectivity HWCX-NET-002 API request timeout Retry the request or check server status HWCX-STORE-001 Secure storage write error Ensure sufficient device storage HWCX-STORE-002 Secure storage read error Verify the key used for storage HWCX-BIO-001 Biometric hardware not available Use alternative authentication method HWCX-BIO-002 Biometric not enrolled Prompt user to set up biometrics HWCX-INIT-001 Framework initialization failed Check initialization parameters HWCX-TAMPER-001 App integrity check failed Potential app tampering detected"},{"location":"troubleshoot/#how-to-report-an-issue","title":"How to Report an Issue","text":"<p>If you encounter an issue not covered in this guide:</p> <ol> <li>Gather relevant information (error messages, steps to reproduce, device info).</li> <li>Check if the issue is already reported in our GitHub Issues.</li> <li>If not, create a new issue with a detailed description of the problem.</li> </ol> <p>For urgent issues or security vulnerabilities, please contact our support team directly at support@hawcx.com.</p> <p>Remember, when reporting issues, never share sensitive information like API keys or user credentials.</p>"},{"location":"android/best-practices/","title":"Best practices","text":""},{"location":"android/best-practices/#best-practices","title":"Best Practices","text":"<p>Implementing Hawcx in your Android application is like upgrading from a tricycle to a supercharged motorcycle for security. We\u2019re working hard to add features that will make your life easier and your app more secure. Keep an eye out for updates\u2014you won\u2019t want to miss them!</p>"},{"location":"android/best-practices/#1-initialization-and-configuration","title":"1. Initialization and Configuration","text":"<ul> <li>Initialize Early: Always initialize HawcxInitializer in your Application class's <code>onCreate()</code> method to ensure it's ready when your app starts.</li> </ul> <pre><code>public class MyApplication extends Application {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        HawcxInitializer.getInstance().init(this, \"YOUR_API_KEY_HERE\");\n    }\n}\n</code></pre> <ul> <li>Secure API Keys: Never hardcode your Hawcx API key in your source code. Use secure storage methods or obfuscation techniques.</li> </ul>"},{"location":"android/best-practices/#2-authentication","title":"2. Authentication","text":"<ul> <li>Use Biometric Authentication: For sensitive operations, implement biometric authentication when available.</li> </ul> <pre><code>signIn.checkLastUser(this);\n\n@Override\npublic void initiateBiometricLogin(Runnable onSuccess) {\n    // Handle Biometric Auth\n}\n</code></pre> <p>&lt;!-- ## 3. Data Protection</p> <ul> <li>Encrypt All Sensitive Data: Use Hawcx's encryption methods for all sensitive data before storing or transmitting.</li> </ul> <pre><code>import com.hawcx.util.EncryptedSharedPreferencesUtil;\n\nEncryptedSharedPreferencesUtil.setString(context, \"key\", senstiveData); \nEncryptedSharedPreferencesUtil.setLong(context, \"key\", senstiveData); \n``` --&gt;\n\n## 4. Error Handling and Logging\n\n- **Implement Proper Error Handling**: Always catch and handle exceptions thrown by Hawcx Authentication methods.\n\n```java\ntry {\n    // Hawcx Authentication operation\n} catch (HawcxException e) {\n    Log.e(\"HawcxError\", \"Operation failed: \" + e.getMessage());\n    // Handle the error appropriately\n}\n</code></pre> <ul> <li>Secure Logging: Avoid logging sensitive information. Use Hawcx Authentication's secure logging features for debugging.</li> </ul> <pre><code>HawcxLogger.log(LogLevel.INFO, \"User action completed\", \"UserAction\");\n</code></pre> <p>By following these best practices, you can ensure that you're using Hawcx Authentication effectively and maximizing the security of your Android application. Remember to review the API documentation for detailed information on each feature and method mentioned here. </p>"},{"location":"android/existing-project/","title":"Existing Project","text":""},{"location":"android/existing-project/#integrating-hawcx-into-an-existing-project","title":"Integrating Hawcx into an Existing Project","text":"<p>This guide will walk you through the process of adding Hawcx to your existing Android project. By following these steps, you'll be able to enhance your app's security features quickly and efficiently.</p>"},{"location":"android/existing-project/#prerequisites","title":"Prerequisites","text":"<ul> <li>Android Studio installed on your development machine</li> <li>An existing Android project</li> <li>Minimum SDK version 26 or higher</li> </ul>"},{"location":"android/existing-project/#step-1-add-the-hawcx-aar","title":"Step 1: Add the Hawcx AAR","text":"<ol> <li> <p>Download the Hawcx AAR file</p> </li> <li> <p>In your Android project, create a new folder named <code>libs</code> in the <code>app</code> directory if it doesn't already exist.</p> </li> <li> <p>Copy the downloaded AAR file into the <code>libs</code> folder.</p> </li> <li> <p>Please make sure that names match with the names provided in the document.</p> </li> </ol>"},{"location":"android/existing-project/#step-2-update-gradle-configuration","title":"Step 2: Update Gradle Configuration","text":"<ol> <li> <p>Open your app-level <code>build.gradle</code> file.</p> </li> <li> <p>Add the following to the <code>dependencies</code> section:</p> </li> </ol> <pre><code>dependencies {\n    implementation files('libs/hawcx.aar')\n    // Other dependencies...\n}\n</code></pre> <ol> <li>Sync your project with the Gradle files.</li> </ol>"},{"location":"android/existing-project/#step-3-initialize-hawcx","title":"Step 3: Initialize Hawcx","text":"<ol> <li> <p>Open your main Application class. If you don't have one, create a new class that extends <code>Application</code>.</p> </li> <li> <p>Add the following code to initialize Hawcx:</p> </li> </ol> <pre><code>import com.hawcx.HawcxInitializer;\n\npublic class MyApplication extends Application {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        HawcxInitializer.getInstance().init(this, \"YOUR_API_KEY_HERE\");    }\n}\n</code></pre> <ol> <li>If you created a new Application class, make sure to register it in your <code>AndroidManifest.xml</code>:</li> </ol> <pre><code>&lt;application\n    android:name=\".MyApplication\"\n    ...&gt;\n    &lt;!-- Your existing application components --&gt;\n&lt;/application&gt;\n</code></pre>"},{"location":"android/existing-project/#step-4-implement-hawcx-features","title":"Step 4: Implement Hawcx Features","text":"<p>Now that Hawcx is integrated into your project, you can start using its features. Here are a few examples:</p>"},{"location":"android/existing-project/#secure-user-authentication","title":"Secure User Authentication","text":"<pre><code>import com.hawcx.auth.SignIn;\n\n// In your login activity or fragment\nSignIn loginAct = HawcxInitializer.getInstance().getSignIn();\n// Check last logged in user and signal biometric auth if applicable\nloginAct.checkLastUser(this);\n\nloginAct.signIn(email, this);\n\n@Override\npublic void onSuccessfulLogin(String loggedInEmail) {\n    // Handle successful login\n}\n\n@Override\npublic void showError(String errorMessage) {\n    // Handle login failure\n}\n</code></pre>"},{"location":"android/flutter-integration/","title":"Flutter Integration","text":""},{"location":"android/flutter-integration/#flutter-integration-guide-for-hawcx","title":"Flutter Integration Guide for Hawcx","text":"<p>This guide will walk you through the process of integrating Hawcx into your Flutter application.</p>"},{"location":"android/flutter-integration/#prerequisites","title":"Prerequisites","text":"<ul> <li>Flutter development environment set up</li> <li>Basic knowledge of Flutter and Android development</li> </ul>"},{"location":"android/flutter-integration/#integration-steps","title":"Integration Steps","text":"<ol> <li>Add Hawcx to your Android project</li> </ol> <p>In your flutter project, navigate to the <code>android/app</code> directory and create a <code>libs</code> folder if it doesn't exist. Place the Hawcx AAR file in this folder.</p> <ol> <li>Update build.gradle</li> </ol> <p>In <code>android/app/build.gradle</code>, add the following:</p> <pre><code> defaultConfig {\n     // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).\n     applicationId = \"com.example.flutter_hawcx\"\n     // You can update the following values to match your application needs.\n     // For more information, see: https://flutter.dev/to/review-gradle-config.\n     minSdk = 26 // Hawcx require API 26\n     targetSdk = flutter.targetSdkVersion\n     versionCode = flutter.versionCode\n     versionName = flutter.versionName\n }\n\n dependencies {\n     // Import the aar file from the libs directory\n     implementation fileTree(dir: 'libs', include: ['*.aar'])\n\n     // Add the dependencies that Hawcx requires\n     implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.11'\n     implementation 'com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.11'\n     implementation 'com.squareup.retrofit2:retrofit:2.10.0'\n     implementation 'com.squareup.retrofit2:converter-gson:2.10.0'\n     implementation \"androidx.biometric:biometric-ktx:1.2.0-alpha05\"\n     implementation 'androidx.security:security-crypto:1.1.0-alpha03'\n     implementation 'com.google.android.material:material:1.4.0'\n     implementation 'com.google.android.gms:play-services-location:21.2.0'\n     implementation 'androidx.fragment:fragment-ktx:1.3.6'\n     implementation 'androidx.appcompat:appcompat:1.3.0'\n     implementation 'androidx.core:core-ktx:1.6.0'\n }\n</code></pre> <ol> <li>Create a Native Module </li> </ol> <p>Create a new kotlin file named <code>HawcxModule.kt</code> in <code>android\\app\\src\\main\\java\\com\\hawcxapp\\</code>:    (following are sample methods, your implementations can change. Closely watch for all overrides)</p> <pre><code> package com.example.flutter_hawcx\n\n import android.content.Context\n import androidx.biometric.BiometricPrompt\n import androidx.core.content.ContextCompat\n import android.os.Handler\n import android.os.Looper\n import io.flutter.plugin.common.MethodCall\n import io.flutter.plugin.common.MethodChannel\n import com.hawcx.HawcxInitializer\n import com.hawcx.auth.SignIn\n import com.hawcx.auth.SignUp\n import com.hawcx.auth.Restore\n import com.hawcx.utils.AuthErrorHandler\n import com.hawcx.utils.AuthErrorHandler.SignInErrorCode\n\n class HawcxModule(private val context: Context) : MethodChannel.MethodCallHandler {\n\n     private val apiKey = \"YOUR_API_KEY\"\n     private var signUp: SignUp? = null\n     private var signIn: SignIn? = null\n     private var restore: Restore? = null\n\n     init {\n         HawcxInitializer.getInstance().init(context, apiKey)\n         signUp = SignUp(context, apiKey)\n         signIn = SignIn(context, apiKey)\n         restore = Restore(context, apiKey)\n     }\n\n     override fun onMethodCall(call: MethodCall, result: MethodChannel.Result) {\n         when (call.method) {\n             \"signUp\" -&gt; {\n                 val username = call.argument&lt;String&gt;(\"username\")\n                 if (username != null) {\n                     signUp(username, result)\n                 } else {\n                     result.error(\"ERROR\", \"Username is required\", null)\n                 }\n             }\n             \"signIn\" -&gt; {\n                 val username = call.argument&lt;String&gt;(\"username\")\n                 if (username != null) {\n                     signIn(username, result)\n                 } else {\n                     result.error(\"ERROR\", \"Username is required\", null)\n                 }\n             }\n             \"handleVerifyOTP\" -&gt; {\n                 val username = call.argument&lt;String&gt;(\"username\")\n                 val otp = call.argument&lt;String&gt;(\"otp\")\n                 if (username != null &amp;&amp; otp != null) {\n                     handleVerifyOTP(username, otp, result)\n                 } else {\n                     result.error(\"ERROR\", \"Username and OTP are required\", null)\n                 }\n             }\n             \"getLastUser\" -&gt; {\n                 getLastUser(result)\n             }\n             \"checkLastUser\" -&gt; {\n                 checkLastUser(result)\n             }\n             \"initiateBiometricLogin\" -&gt; {\n                 initiateBiometricLogin(result, Runnable { })\n             }\n             else -&gt; {\n                 result.notImplemented()\n             }\n         }\n     }\n\n     // Public method to handle signUp\n     public fun signUp(username: String, result: MethodChannel.Result) {\n         signUp?.signUp(username, object : SignUp.SignUpCallback {\n             override fun showError(errorCode: String) {\n                 result.error(\"SIGNUP_ERROR\", \"SignUp failed: $errorCode\", null)\n             }\n\n             override fun showError(errorCode: AuthErrorHandler.SignUpErrorCode, errorMessage: String) {\n                 result.error(\"SIGNUP_ERROR\", \"SignUp failed: $errorMessage\", null)\n             }\n\n             override fun onGenerateOTPSuccess() {\n                 result.success(\"OTP generated successfully\")\n             }\n\n             override fun onSuccessfulSignup() {\n                 result.success(\"Sign up successful\")\n             }\n         })\n     }\n\n     // Public method to handle signIn\n     public fun signIn(username: String, result: MethodChannel.Result) {\n         try{\n         signIn?.signIn(username, object : SignIn.SignInCallback {\n             override fun showEmailSignInScreen() {\n                 result.error(\"EMAIL_SIGN_IN_REQUIRED\", \"Please sign in with your email.\", null)\n             }\n\n             override fun onSuccessfulLogin(username: String) {\n                 result.success(\"Login successful\")\n             }\n\n             override fun showError(errorCode: AuthErrorHandler.SignInErrorCode, message: String) {\n                 result.error(\"SIGNIN_ERROR\", \"SignIn failed: $message\", null)\n             }\n\n             override fun showError(message: String) {\n                 result.error(\"SIGNIN_ERROR\", \"SignIn failed: $message\", null)\n             }\n\n             override fun initiateBiometricLogin(callback: Runnable) {\n                 initiateBiometricLogin(result, callback)\n             }\n         })\n         } catch (e: Exception) {\n             result.error(\"SIGNUP_ERROR\", e.message, null)\n         }\n     }\n\n     public fun handleVerifyOTP(username: String, otp: String, result: MethodChannel.Result) {\n         signUp?.handleVerifyOTP(username, otp, object : SignUp.SignUpCallback {\n             override fun showError(errorCode: String) {\n                 result.error(\"VERIFY_OTP_ERROR\", \"OTP verification failed: $errorCode\", null)\n             }\n\n             override fun showError(errorCode: AuthErrorHandler.SignUpErrorCode, errorMessage: String) {\n                 result.error(\"VERIFY_OTP_ERROR\", \"OTP verification failed: $errorMessage\", null)\n             }\n\n             override fun onGenerateOTPSuccess() {\n                 // Not used for OTP verification\n             }\n\n             override fun onSuccessfulSignup() {\n                 result.success(\"OTP verified and signup complete\")\n             }\n         })\n     }\n\n     public fun getLastUser(result: MethodChannel.Result) {\n         try {\n             val lastUser = signIn?.getLastUser() ?: \"\"\n             result.success(lastUser)\n         } catch (e: Exception) {\n             result.error(\"GET_LAST_USER_ERROR\", \"Failed to get last user: ${e.message}\", null)\n         }\n     }\n\n     public fun checkLastUser(result: MethodChannel.Result) {\n         signIn?.checkLastUser(object : SignIn.SignInCallback {\n             override fun showEmailSignInScreen() {\n                 result.success(\"SHOW_EMAIL_SIGN_IN_SCREEN\")\n             }\n\n             override fun onSuccessfulLogin(username: String) {\n                 result.success(\"Login successful for user: $username\")\n             }\n\n             override fun showError(errorCode: AuthErrorHandler.SignInErrorCode, message: String) {\n                 result.error(\"CHECK_LAST_USER_ERROR\", \"Check last user failed: $message\", null)\n             }\n\n             override fun showError(message: String) {\n                 result.error(\"CHECK_LAST_USER_ERROR\", \"Check last user failed: $message\", null)\n             }\n\n             override fun initiateBiometricLogin(callback: Runnable) {\n                 initiateBiometricLogin(result, callback)\n             }\n         })\n     }\n\n     public fun initiateBiometricLogin(result: MethodChannel.Result, callback: Runnable) {\n         val currentActivity = (context as? androidx.fragment.app.FragmentActivity)\n\n         if (currentActivity == null) {\n             result.error(\"ACTIVITY_ERROR\", \"Current activity is not available\", null)\n             return\n         }\n\n         val executor = ContextCompat.getMainExecutor(context)\n         val biometricPrompt = BiometricPrompt(\n             currentActivity,\n             executor,\n             object : BiometricPrompt.AuthenticationCallback() {\n                 override fun onAuthenticationError(errorCode: Int, errorMessage: CharSequence) {\n                     result.error(\"BIOMETRIC_AUTH_ERROR\", \"Authentication error: $errorMessage\", null)\n                 }\n\n                 override fun onAuthenticationSucceeded(authResult: BiometricPrompt.AuthenticationResult) {\n                     callback.run()\n                 }\n\n                 override fun onAuthenticationFailed() {\n                     result.error(\"BIOMETRIC_AUTH_FAILED\", \"Authentication failed\", null)\n                 }\n             })\n\n         val promptInfo = BiometricPrompt.PromptInfo.Builder()\n             .setTitle(\"Biometric Login\")\n             .setDescription(\"Use your fingerprint or face to log in\")\n             .setNegativeButtonText(\"Cancel\")\n             .build()\n\n         biometricPrompt.authenticate(promptInfo)\n     }\n         public fun generateOtpForAccountRestore(email: String, result: MethodChannel.Result) {\n         restore?.generateOtp(email, object : Restore.OnSuccessListener {\n             override fun onSuccess(message: String) {\n                 result.success(message)\n             }\n         }, object : Restore.OnErrorListener {\n             override fun onError(error: String) {\n                 result.error(\"GENERATE_OTP_ERROR\", error, null)\n             }\n         })\n     }\n\n     public fun verifyOtpForAccountRestore(email: String, otp: String, result: MethodChannel.Result) {\n         restore?.verifyOtp(email, otp, object : Restore.OnSuccessListener {\n             override fun onSuccess(message: String) {\n                 result.success(message)\n             }\n         }, object : Restore.OnErrorListener {\n             override fun onError(error: String) {\n                 result.error(\"VERIFY_OTP_ERROR\", error, null)\n             }\n         })\n     }\n     // Add other methods for different HawcxAuth features\n }\n</code></pre> <ol> <li>Use module in MainActivity.kt</li> </ol> <p>In <code>MainActivity.kt</code>, implement the channel calls to communicate with dart and use FlutterFragmentActivity:    (You can change the implementation based on your need)</p> <p><pre><code> package com.example.flutter_hawcx\n\n import android.os.Bundle\n import io.flutter.embedding.android.FlutterFragmentActivity\n import io.flutter.plugin.common.MethodChannel\n import io.flutter.embedding.engine.FlutterEngine\n import io.flutter.plugins.GeneratedPluginRegistrant\n import com.example.flutter_hawcx.HawcxModule\n\n class MainActivity: FlutterFragmentActivity() {\n     private val CHANNEL = \"com.example.flutter_hawcx/hawcx\"\n     private lateinit var hawcxModule: HawcxModule\n\n     override fun onCreate(savedInstanceState: Bundle?) {\n         super.onCreate(savedInstanceState)\n\n         // Initialize HawcxModule\n         hawcxModule = HawcxModule(this)\n     }\n\n     // Ensure flutterEngine is initialized to avoid nullability issues\n     override fun configureFlutterEngine(flutterEngine: FlutterEngine) {\n         super.configureFlutterEngine(flutterEngine)\n         GeneratedPluginRegistrant.registerWith(flutterEngine)\n\n         // Set up the method channel to communicate with Flutter\n         MethodChannel(flutterEngine.dartExecutor.binaryMessenger, CHANNEL).setMethodCallHandler { call, result -&gt;\n             when (call.method) {\n                 // Sign-up functionality\n                 \"signUp\" -&gt; {\n                     val username = call.argument&lt;String&gt;(\"username\")\n                     if (username != null) {\n                         hawcxModule.signUp(username, result)\n                     } else {\n                         result.error(\"ERROR\", \"Username is required\", null)\n                     }\n                 }\n\n                 // Sign-in functionality\n                 \"signIn\" -&gt; {\n                     val username = call.argument&lt;String&gt;(\"username\")\n                     if (username != null) {\n                         hawcxModule.signIn(username, result)\n                     } else {\n                         result.error(\"ERROR\", \"Username is required\", null)\n                     }\n                 }\n\n                 // OTP Verification functionality\n                 \"handleVerifyOTP\" -&gt; {\n                     val username = call.argument&lt;String&gt;(\"username\")\n                     val otp = call.argument&lt;String&gt;(\"otp\")\n                     if (username != null &amp;&amp; otp != null) {\n                         hawcxModule.handleVerifyOTP(username, otp, result)\n                     } else {\n                         result.error(\"ERROR\", \"Username and OTP are required\", null)\n                     }\n                 }\n\n                 // Get last signed-in user\n                 \"getLastUser\" -&gt; {\n                     hawcxModule.getLastUser(result)\n                 }\n\n                 // Check last signed-in user\n                 \"checkLastUser\" -&gt; {\n                     hawcxModule.checkLastUser(result)\n                 }\n\n                 // Initiate biometric login\n                 \"initiateBiometricLogin\" -&gt; {\n                     hawcxModule.initiateBiometricLogin(result, Runnable { })\n                 }\n\n                 // Generate OTP for account restore\n                 \"generateOtpForAccountRestore\" -&gt; {\n                     val email = call.argument&lt;String&gt;(\"email\")\n                     if (email != null) {\n                         hawcxModule.generateOtpForAccountRestore(email, result)\n                     } else {\n                         result.error(\"ERROR\", \"Email is required\", null)\n                     }\n                 }\n\n                 // Verify OTP for account restore\n                 \"verifyOtpForAccountRestore\" -&gt; {\n                     val email = call.argument&lt;String&gt;(\"email\")\n                     val otp = call.argument&lt;String&gt;(\"otp\")\n                     if (email != null &amp;&amp; otp != null) {\n                         hawcxModule.verifyOtpForAccountRestore(email, otp, result)\n                     } else {\n                         result.error(\"ERROR\", \"Email and OTP are required\", null)\n                     }\n                 }\n\n                 // Default handler for unknown method calls\n                 else -&gt; {\n                     result.notImplemented()\n                 }\n             }\n         }\n     }\n }\n</code></pre> 5. Add requirements in <code>android\\app\\src\\main\\AndroidManifest.xml</code></p> <p>You need to add biometric access to the to the <code>AndroidManifest.xml</code> as following:    (you can copy the following xml config or check your config for xmlns:tools, permission, feature, android:supportsRt and tools:replace)</p> <p><pre><code> &lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:tools=\"http://schemas.android.com/tools\"&gt;\n\n     &lt;!-- Permissions required for biometric authentication --&gt;\n     &lt;uses-permission android:name=\"android.permission.USE_BIOMETRIC\" /&gt;\n     &lt;uses-permission android:name=\"android.permission.USE_FINGERPRINT\" /&gt;\n     &lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n     &lt;uses-permission android:name=\"android.permission.CAMERA\" /&gt;\n\n         &lt;!-- Features related to biometrics --&gt;\n     &lt;uses-feature\n         android:name=\"android.hardware.fingerprint\"\n         android:required=\"false\" /&gt;\n     &lt;uses-feature\n         android:name=\"android.hardware.biometrics\"\n         android:required=\"false\" /&gt;\n\n     &lt;application\n         android:label=\"flutter_hawcx\"\n         android:name=\"${applicationName}\"\n         android:icon=\"@mipmap/ic_launcher\"\n         android:enableOnBackInvokedCallback=\"true\"\n         tools:replace=\"android:label\"&gt;\n         &lt;activity\n             android:name=\".MainActivity\"\n             android:exported=\"true\"\n             android:launchMode=\"singleTop\"\n             android:taskAffinity=\"\"\n             android:theme=\"@style/LaunchTheme\"\n             android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode\"\n             android:hardwareAccelerated=\"true\"\n             android:windowSoftInputMode=\"adjustResize\"&gt;\n             &lt;!-- Specifies an Android theme to apply to this Activity as soon as\n                 the Android process has started. This theme is visible to the user\n                 while the Flutter UI initializes. After that, this theme continues\n                 to determine the Window background behind the Flutter UI. --&gt;\n             &lt;meta-data\n             android:name=\"io.flutter.embedding.android.NormalTheme\"\n             android:resource=\"@style/NormalTheme\"\n             /&gt;\n             &lt;intent-filter&gt;\n                 &lt;action android:name=\"android.intent.action.MAIN\"/&gt;\n                 &lt;category android:name=\"android.intent.category.LAUNCHER\"/&gt;\n             &lt;/intent-filter&gt;\n         &lt;/activity&gt;\n         &lt;!-- Don't delete the meta-data below.\n             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java --&gt;\n         &lt;meta-data\n             android:name=\"flutterEmbedding\"\n             android:value=\"2\" /&gt;\n     &lt;/application&gt;\n     &lt;!-- Required to query activities that can process text, see:\n         https://developer.android.com/training/package-visibility and\n         https://developer.android.com/reference/android/content/Intent#ACTION_PROCESS_TEXT.\n\n         In particular, this is used by the Flutter engine in io.flutter.plugin.text.ProcessTextPlugin. --&gt;\n     &lt;queries&gt;\n         &lt;intent&gt;\n             &lt;action android:name=\"android.intent.action.PROCESS_TEXT\"/&gt;\n             &lt;data android:mimeType=\"text/plain\"/&gt;\n         &lt;/intent&gt;\n     &lt;/queries&gt;\n &lt;/manifest&gt;\n</code></pre> 6. Add dependencies</p> <p>Add local_auth in <code>pubspec.yaml</code> </p> <p><pre><code>dependencies:\n flutter:\n     sdk: flutter\n local_auth: ^2.3.0\n</code></pre> 7. Use HawcxAuth in Flutter</p> <p>Now you can use HawcxAuth in your Flutter widgets:</p> <pre><code> import 'package:flutter/material.dart';\n import 'package:flutter/services.dart'; // For Native MethodChannel calls\n import 'package:email_validator/email_validator.dart'; // Optional email validation package\n\n class SignupScreen extends StatefulWidget {\n @override\n _SignupScreenState createState() =&gt; _SignupScreenState();\n }\n\n class _SignupScreenState extends State&lt;SignupScreen&gt; {\n static const platform = MethodChannel(\n     'com.example.flutter_hawcx/hawcx'); // Similar to NativeModules in React Native\n final TextEditingController _emailController = TextEditingController();\n bool _loading = false; // Loading state to manage the signup process\n\n @override\n void initState() {\n     super.initState();\n     checkLastUser(); // Similar to useEffect in React Native\n }\n\n // Email validation\n bool validateEmail(String email) {\n     return EmailValidator.validate(email);\n }\n\n // Check if a user exists and handle biometric login\n Future&lt;void&gt; checkLastUser() async {\n     setState(() {\n     _loading = true; // Show loading indicator\n     });\n\n     try {\n     final String result = await platform.invokeMethod('checkLastUser');\n     print(result);\n     if (result.contains(\"Login successful for user\")) {\n         setState(() {\n         _loading = false; // Hide loading indicator\n         });\n         Navigator.pushReplacementNamed(context, '/home');\n     } else if (result == 'SHOW_EMAIL_SIGN_IN_SCREEN') {\n         setState(() {\n         _loading = false; // Hide loading indicator\n         });\n         Navigator.pushReplacementNamed(context, '/signin');\n     }\n     } on PlatformException catch (e) {\n     print(\"Error checking last user: ${e.message}\");\n     setState(() {\n         _loading = false; // Hide loading indicator\n     });\n     }\n }\n\n // Handle signup process\n void handleSignup() async {\n     String email = _emailController.text.trim();\n     if (email.isNotEmpty &amp;&amp; validateEmail(email)) {\n     setState(() {\n         _loading = true; // Show loading state\n     });\n     try {\n         await platform.invokeMethod('signUp', {'username': email});\n         ScaffoldMessenger.of(context).showSnackBar(\n             SnackBar(content: Text('OTP sent for verification!')));\n         Navigator.pushNamed(context, '/verification', arguments: email);\n     } on PlatformException catch (e) {\n         // Check if the error message contains 'User already exists'\n         if (e.message != null &amp;&amp; e.message!.contains('User already exists')) {\n         ScaffoldMessenger.of(context).showSnackBar(\n             SnackBar(content: Text('User already exists. Please sign in.')));\n         Navigator.pushNamed(context, '/signin');\n         } else {\n         ScaffoldMessenger.of(context).showSnackBar(\n             SnackBar(content: Text('Sign up failed: ${e.message}')));\n         }\n     } catch (e) {\n         ScaffoldMessenger.of(context)\n             .showSnackBar(SnackBar(content: Text('Sign up failed')));\n     } finally {\n         setState(() {\n         _loading = false; // Hide loading state\n         });\n     }\n     } else if (email.isEmpty) {\n     ScaffoldMessenger.of(context)\n         .showSnackBar(SnackBar(content: Text('Please enter your email')));\n     } else {\n     ScaffoldMessenger.of(context)\n         .showSnackBar(SnackBar(content: Text('Please enter a valid email')));\n     }\n }\n\n @override\n Widget build(BuildContext context) {\n     return Scaffold(\n     appBar: AppBar(title: Text('Sign Up')),\n     body: Stack(\n         children: [\n         Padding(\n             padding: EdgeInsets.all(16),\n             child: Column(\n             mainAxisAlignment: MainAxisAlignment.center,\n             children: [\n                 Text(\n                 'Enter your Email to Sign Up:',\n                 style: TextStyle(fontSize: 18),\n                 ),\n                 SizedBox(height: 12),\n                 TextField(\n                 controller: _emailController,\n                 decoration: InputDecoration(\n                     labelText: 'Email',\n                     border: OutlineInputBorder(),\n                 ),\n                 keyboardType: TextInputType.emailAddress,\n                 ),\n                 SizedBox(height: 12),\n                 ElevatedButton(\n                 onPressed: _loading ? null : handleSignup,\n                 child: Text(_loading ? 'Signing Up...' : 'Sign Up'),\n                 ),\n                 SizedBox(height: 12),\n                 TextButton(\n                 onPressed: () =&gt; Navigator.pushNamed(context, '/signin'),\n                 child: Text('Already have an account? Sign In'),\n                 ),\n             ],\n             ),\n         ),\n         // Show a circular progress indicator when _loading is true\n         if (_loading)\n             Center(\n             child: CircularProgressIndicator(),\n             ),\n         ],\n     ),\n     );\n }\n }\n</code></pre>"},{"location":"android/flutter-integration/#best-practices","title":"Best Practices","text":"<ul> <li>Always handle errors and exceptions from native methods.</li> <li>Use async/await for cleaner code when calling native methods.</li> <li>Implement proper error handling and user feedback in your React Native UI.</li> </ul>"},{"location":"android/java-integration/","title":"Java Integration","text":""},{"location":"android/java-integration/#java-integration-guide-for-hawcx","title":"Java Integration Guide for Hawcx","text":"<p>This guide provides detailed instructions on how to use Hawcx in your Java Android application. We'll cover key features and best practices to help you make the most of Hawcx's security capabilities.</p>"},{"location":"android/java-integration/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Initialization</li> <li>User Authentication</li> <li>Biometric Authentication</li> </ol>"},{"location":"android/java-integration/#initialization","title":"Initialization","text":"<p>Before using any Hawcx features, you need to initialize it in your Application class:</p> <pre><code>import android.app.Application;\nimport com.hawcx.HawcxInitializer;\n\npublic class MyApplication extends Application {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        HawcxInitializer.getInstance().init(this, \"YOUR_API_KEY_HERE\");\n    }\n}\n</code></pre> <p>Don't forget to register this Application class in your AndroidManifest.xml.</p>"},{"location":"android/java-integration/#user-authentication","title":"User Authentication","text":"<p>HawcxInitializer provides secure user authentication methods:</p> <pre><code>import com.hawcx.auth.SignUp;\nimport com.hawcx.auth.SignIn;\nimport com.hawcx.HawcxInitializer;\n\n// User Registration\nSingUp registerAct = HawcxInitializer.getInstance().getSignUp();\n\nregisterAct.signUp(\"username\", this::onSuccessHandler, this::onFailureHandler);\n\n\n// User Login\nSignIn loginAct = HawcxInitializer.getInstance().getSignIn();\n\n// Check last logged in user and signal biometric auth if applicable\nloginAct.checkLastUser(this);\n\nloginAct.signIn(email, this);\n\n// implement the class with SignIn.SignInCallback\n@Override\npublic void onSuccessfulLogin(String loggedInEmail) {\n    // Handle successful login\n}\n\n@Override\npublic void showError(String errorMessage) {\n    // Handle login failure\n}\n</code></pre>"},{"location":"android/java-integration/#biometric-authentication","title":"Biometric Authentication","text":"<p>HawcxInitializer's signIn object provides biometric authentication to be implemented:</p> <pre><code>import androidx.biometric.BiometricManager;\nimport androidx.biometric.BiometricPrompt;\nimport com.hawcx.auth.SignIn;\n\n\npublic class LoginActivity extends AppCompatActivity implements SignIn.SignInCallback {\n\n @Override\n    protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_auth);\n\n        signIn = HawcxInitializer.getInstance().getSignIn();\n        // Check last logged in user and signal biometric auth if applicable\n        signIn.checkLastUser(this);\n    }\n\n// If lastuser found\n@Override\n    public void initiateBiometricLogin(Runnable onSuccess) {\n        // Handle Biometric Auth \n    }\n\n// If no last user is found \n@Override\n    public void showEmailSignInScreen() {\n        // Handle the Email screen\n    }\n}\n</code></pre>"},{"location":"android/java-integration/#best-practices","title":"Best Practices","text":"<ol> <li>Always initialize Hawcx before using any of its features.</li> <li>Use strong, unique passwords for each user.</li> <li>Implement multi-factor authentication when possible.</li> <li>Regularly update Hawcx to the latest version.</li> <li>Use SecureStorage for all sensitive data.</li> <li>Implement proper error handling for all Hawcx methods.</li> <li>Use HTTPS for all network communications.</li> <li>Regularly check for app tampering.</li> </ol>"},{"location":"android/java-integration/#conclusion","title":"Conclusion","text":"<p>This guide covers the basic usage of Hawcx in a Java Android application. For more advanced features and detailed API documentation, please refer to our complete API reference.</p> <p>If you encounter any issues or have questions, please check our FAQ or contact our support team.</p>"},{"location":"android/new-project/","title":"New Project","text":""},{"location":"android/new-project/#creating-a-new-project-with-hawcx","title":"Creating a New Project with Hawcx","text":"<p>This guide will walk you through the process of creating a new Android project with Hawcx integration from scratch.</p>"},{"location":"android/new-project/#prerequisites","title":"Prerequisites","text":"<ul> <li>Android Studio installed on your development machine</li> <li>Basic knowledge of Android development</li> </ul>"},{"location":"android/new-project/#steps","title":"Steps","text":"<ol> <li>Create a New Android Project</li> <li>Open Android Studio</li> <li>Click on \"File\" &gt; \"New\" &gt; \"New Project\"</li> <li>Choose \"Empty Activity\" and click \"Next\"</li> <li>Set your application name, package name, and minimum SDK (26 or higher)</li> <li> <p>Click \"Finish\" to create the project</p> </li> <li> <p>Add Hawcx AAR</p> </li> <li>Download the Hawcx AAR file.</li> <li>Create a new folder named <code>libs</code> in your project's <code>app</code> directory</li> <li>Copy the downloaded AAR file into the <code>libs</code> folder</li> <li> <p>Please make sure that names match with the names provided in the document.</p> </li> <li> <p>Update Gradle Configuration</p> </li> <li>Open your app-level <code>build.gradle</code> file</li> <li> <p>Add the following to the <code>dependencies</code> section:</p> <p><pre><code>dependencies {\n    implementation files('libs/hawcx.aar')\n    // Other dependencies...\n}\n</code></pre>    - Sync your project with Gradle files</p> </li> <li> <p>Initialize Hawcx Authentication</p> </li> <li> <p>Create a new Application class:</p> <p><pre><code>   import android.app.Application;\n   import com.hawcx.HawcxInitializer;\n\n   public class MyApplication extends Application {\n       @Override\n       public void onCreate() {\n           super.onCreate();\n           HawcxInitializer.getInstance().init(this, \"YOUR_API_KEY_HERE\");\n       }\n   }\n</code></pre>    - Register the Application class in your <code>AndroidManifest.xml</code>:</p> <pre><code>&lt;application\n    android:name=\".MyApplication\"\n    ...&gt;\n    &lt;!-- Your activities and other components --&gt;\n&lt;/application&gt;\n</code></pre> </li> <li> <p>Implement Hawcx Features</p> </li> <li>Now you can start using Hawcx features in your activities and fragments. </li> </ol> <pre><code>  import com.hawcx.auth.SignIn;\n  import com.hawcx.HawcxInitializer;\n\n  public class MainActivity extends AppCompatActivity implements SignIn.SignInCallback {\n      @Override\n      protected void onCreate(Bundle savedInstanceState) {\n          super.onCreate(savedInstanceState);\n          setContentView(R.layout.activity_main);\n\n          // Example: Implement secure login\n          // User Login\n          SignIn loginAct = HawcxInitializer.getInstance().getSignIn();\n\n          // Check last logged in user and signal biometric auth if applicable\n          loginAct.checkLastUser(this);\n\n          loginAct.signIn(email, this);\n\n          }\n          @Override\n          public void onSuccessfulLogin(String loggedInEmail) {\n              // Handle successful login\n          }\n\n          @Override\n          public void showError(String errorMessage) {\n              // Handle login failure\n          }\n\n          // If lastuser found\n          @Override\n          public void initiateBiometricLogin(Runnable onSuccess) {\n              // Handle Biometric Auth \n          }\n\n          // If no last user is found \n          @Override\n              public void showEmailSignInScreen() {\n                  // Handle the Email screen\n              }\n      }\n  }\n</code></pre>"},{"location":"android/next-steps/","title":"Next steps","text":"<p>Implementing Hawcx Authentication in your Android application is a great step towards enhancing your app's security. We are working really hard on pushing a lot of features and building this page. Please stay tuned to get more updates</p>"},{"location":"android/react-integration/","title":"React Native Integration","text":""},{"location":"android/react-integration/#react-native-integration-guide-for-hawcx","title":"React Native Integration Guide for Hawcx","text":"<p>This guide will walk you through the process of integrating Hawcx into your React Native application.</p>"},{"location":"android/react-integration/#prerequisites","title":"Prerequisites","text":"<ul> <li>React Native development environment set up</li> <li>Basic knowledge of React Native and Android development</li> </ul>"},{"location":"android/react-integration/#integration-steps","title":"Integration Steps","text":"<ol> <li>Add Hawcx to your Android project</li> </ol> <p>In your React Native project, navigate to the <code>android/app</code> directory and create a <code>libs</code> folder if it doesn't exist. Place the Hawcx AAR file in this folder.</p> <ol> <li>Update build.gradle</li> </ol> <p>In <code>android/app/build.gradle</code>, add the following:</p> <pre><code> dependencies {\n     implementation fileTree(dir: 'libs', include: ['*.aar'])\n\n     // Other dependancies on which hawcx.package is dependent\n     // you can change versions as per porject's need\n\n     implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.11'\n     implementation 'com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.11'\n     implementation 'com.squareup.retrofit2:retrofit:2.10.0'\n     implementation 'com.squareup.retrofit2:converter-gson:2.10.0'\n     implementation \"androidx.biometric:biometric-ktx:1.2.0-alpha05\"\n     implementation 'androidx.security:security-crypto:1.1.0-alpha03'\n }\n</code></pre> <p>Now in <code>android\\build.gradle</code>, add the minSdkVersion as 26:    (Hawcx works with SDK virsion 26 and above)</p> <pre><code>minSdkVersion = 26\n</code></pre> <ol> <li>Create a Native Module </li> </ol> <p>Create a new Kotlin file named <code>HawcxModule.kt</code> in <code>android\\app\\src\\main\\java\\com\\hawcxapp\\</code>:</p> <pre><code> package com.yourproject\n\n import android.widget.Toast\n import android.content.Context\n import androidx.biometric.BiometricPrompt\n import androidx.core.content.ContextCompat\n import com.facebook.react.bridge.Promise\n import com.facebook.react.bridge.ReactApplicationContext\n import com.facebook.react.bridge.ReactContextBaseJavaModule\n import com.facebook.react.bridge.ReactMethod\n import com.hawcx.HawcxInitializer\n import com.hawcx.auth.SignUp\n import com.hawcx.auth.SignIn\n import com.hawcx.auth.Restore\n import com.hawcx.utils.AuthErrorHandler\n import android.os.Handler\n import android.os.Looper\n\n\n class HawcxModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaModule(reactContext) {\n\n     // Hardcoded API Key\n     private val apiKey = \"YOUR_API_KEY\"\n     private var signUp: SignUp? = null\n     private var signIn: SignIn? = null\n     private var restore: Restore? = null\n\n     init {\n         HawcxInitializer.getInstance().init(reactContext, \"apiKey\")\n         signUp = SignUp(reactContext, apiKey)\n         signIn = SignIn(reactContext, apiKey)\n         restore = Restore(reactContext, apiKey)\n     }\n     override fun getName(): String {\n         return \"HawcxModule\"\n     }\n\n     // Expose the signUp method to React Native\n     @ReactMethod\n     fun signUp(username: String, promise: Promise) {\n         signUp?.signUp(username, object : SignUp.SignUpCallback {\n             override fun showError(errorCode: String) {\n                 promise.reject(\"SIGNUP_ERROR\", \"SignUp failed: $errorCode\")\n             }\n\n             override fun showError(errorCode: AuthErrorHandler.SignUpErrorCode, errorMessage: String) {\n                 promise.reject(\"SIGNUP_ERROR\", \"SignUp failed: $errorMessage\")\n             }\n\n             override fun onGenerateOTPSuccess() {\n                 promise.resolve(\"OTP generated successfully\")\n             }\n\n             override fun onSuccessfulSignup() {\n                 promise.resolve(\"Sign up successful\")\n             }\n         })\n     }\n\n     // Expose the handleVerifyOTP method to React Native\n     @ReactMethod\n     fun handleVerifyOTP(username: String, otp: String, promise: Promise) {\n         signUp?.handleVerifyOTP(username, otp, object : SignUp.SignUpCallback {\n             override fun showError(errorCode: String) {\n                 promise.reject(\"VERIFY_OTP_ERROR\", \"OTP verification failed: $errorCode\")\n             }\n\n             override fun showError(errorCode: AuthErrorHandler.SignUpErrorCode, errorMessage: String) {\n                 promise.reject(\"VERIFY_OTP_ERROR\", \"OTP verification failed: $errorMessage\")\n             }\n\n             override fun onGenerateOTPSuccess() {\n                 // Not used for OTP verification\n             }\n\n             override fun onSuccessfulSignup() {\n                 promise.resolve(\"OTP verified and signup complete\")\n             }\n         })\n     }\n\n     // Expose the signIn method to React Native\n     @ReactMethod\n     fun signIn(username: String, promise: Promise) {\n         signIn?.signIn(username, object : SignIn.SignInCallback {\n             override fun showEmailSignInScreen() {\n                 promise.reject(\"EMAIL_SIGN_IN_REQUIRED\", \"Please sign in with your email.\")\n             }\n\n             override fun onSuccessfulLogin(username: String) {\n                 promise.resolve(\"Login successful\")\n             }\n\n             override fun showError(errorCode: AuthErrorHandler.SignInErrorCode, message: String) {\n                 promise.reject(\"SIGNIN_ERROR\", \"SignIn failed: $message\")\n             }\n\n             override fun showError(message: String) {\n                 promise.reject(\"SIGNIN_ERROR\", \"SignIn failed: $message\")\n             }\n\n             override fun initiateBiometricLogin(callback: Runnable) {\n                 initiateBiometricLogin(promise, callback)\n             }\n         })\n     }\n\n     // Expose the getLastUser method to React Native\n     @ReactMethod\n     fun getLastUser(promise: Promise) {\n         try {\n             val lastUser = signIn?.getLastUser() ?: \"\"\n             promise.resolve(lastUser)\n         } catch (e: Exception) {\n             promise.reject(\"GET_LAST_USER_ERROR\", \"Failed to get last user: ${e.message}\")\n         }\n     }\n\n     // Expose the checkLastUser method to React Native\n     @ReactMethod\n     fun checkLastUser(promise: Promise) {\n         signIn?.checkLastUser(object : SignIn.SignInCallback {\n             override fun showEmailSignInScreen() {\n                 promise.resolve(\"SHOW_EMAIL_SIGN_IN_SCREEN\")\n             }\n\n             override fun onSuccessfulLogin(username: String) {\n                 promise.resolve(\"Login successful for user: $username\")\n             }\n\n             override fun showError(errorCode: AuthErrorHandler.SignInErrorCode, message: String) {\n                 promise.reject(\"CHECK_LAST_USER_ERROR\", \"Check last user failed: $message\")\n             }\n\n             override fun showError(message: String) {\n                 promise.reject(\"CHECK_LAST_USER_ERROR\", \"Check last user failed: $message\")\n             }\n\n             override fun initiateBiometricLogin(callback: Runnable) {\n                 initiateBiometricLogin(promise, callback)\n             }\n         })\n     }\n\n     // Method to handle biometric login using React Native Biometrics\n     @ReactMethod\n     private fun initiateBiometricLogin(promise: Promise, callback: Runnable) {\n         val currentActivity = reactApplicationContext.currentActivity\n\n         // Ensure currentActivity is not null\n         if (currentActivity == null) {\n             promise.reject(\"ACTIVITY_ERROR\", \"Current activity is not available\")\n             return\n         }\n\n         // Ensure currentActivity is a FragmentActivity\n         if (currentActivity !is androidx.fragment.app.FragmentActivity) {\n             promise.reject(\"ACTIVITY_ERROR\", \"Current activity is not a FragmentActivity\")\n             return\n         }\n\n         // Run on the main thread to avoid fragment transaction issues\n         Handler(Looper.getMainLooper()).post {\n             val fragmentActivity = currentActivity as androidx.fragment.app.FragmentActivity\n             val executor = ContextCompat.getMainExecutor(reactApplicationContext)\n\n             // Create the BiometricPrompt\n             val biometricPrompt = BiometricPrompt(\n                 fragmentActivity, \n                 executor,\n                 object : BiometricPrompt.AuthenticationCallback() {\n                     override fun onAuthenticationError(errorCode: Int, errorMessage: CharSequence) {\n                         super.onAuthenticationError(errorCode, errorMessage)\n                         promise.reject(\"BIOMETRIC_AUTH_ERROR\", \"Authentication error: $errorMessage\")\n                     }\n\n                     override fun onAuthenticationSucceeded(result: BiometricPrompt.AuthenticationResult) {\n                         super.onAuthenticationSucceeded(result)\n                         promise.resolve(\"Biometric login successful\")\n                         callback.run()\n                     }\n\n                     override fun onAuthenticationFailed() {\n                         super.onAuthenticationFailed()\n                         promise.reject(\"BIOMETRIC_AUTH_FAILED\", \"Authentication failed\")\n                     }\n                 })\n\n             // Build the BiometricPrompt promptInfo\n             val promptInfo = BiometricPrompt.PromptInfo.Builder()\n                 .setTitle(\"Biometric Login\")\n                 .setDescription(\"Use your fingerprint or face to log in\")\n                 .setNegativeButtonText(\"Cancel\")\n                 .build()\n\n             // Show the biometric prompt to the user\n             biometricPrompt.authenticate(promptInfo)\n         }\n     }\n\n\n     // Expose the generateOtpForAccountRestore method for account restoration\n     @ReactMethod\n     fun generateOtpForAccountRestore(email: String, promise: Promise) {\n         restore?.generateOtp(email, object : Restore.OnSuccessListener {\n             override fun onSuccess(message: String) {\n                 promise.resolve(message)\n             }\n         }, object : Restore.OnErrorListener {\n             override fun onError(error: String) {\n                 promise.reject(\"GENERATE_OTP_ERROR\", error)\n             }\n         })\n     }\n\n     // Expose the verifyOtpForAccountRestore method for account restoration\n     @ReactMethod\n     fun verifyOtpForAccountRestore(email: String, otp: String, promise: Promise) {\n         restore?.verifyOtp(email, otp, object : Restore.OnSuccessListener {\n             override fun onSuccess(message: String) {\n                 promise.resolve(message)\n             }\n         }, object : Restore.OnErrorListener {\n             override fun onError(error: String) {\n                 promise.reject(\"VERIFY_OTP_ERROR\", error)\n             }\n         })\n     }\n\n     // Add other methods for different HawcxAuth features\n\n }\n</code></pre> <ol> <li>Create a Package for the Native Module</li> </ol> <p>Create <code>HawcxPackage.kt</code> at <code>android\\app\\src\\main\\java\\com\\hawcxapp\\</code>:</p> <pre><code> package com.hawcxapp\n\n import com.facebook.react.ReactPackage\n import com.facebook.react.bridge.NativeModule\n import com.facebook.react.bridge.ReactApplicationContext\n import com.facebook.react.uimanager.ViewManager\n\n class HawcxPackage : ReactPackage {\n\n     override fun createNativeModules(reactContext: ReactApplicationContext): List&lt;NativeModule&gt; {\n         return listOf(HawcxModule(reactContext))  // Register the HawcxModule\n     }\n\n     override fun createViewManagers(reactContext: ReactApplicationContext): List&lt;ViewManager&lt;*, *&gt;&gt; {\n         return emptyList()  // No ViewManagers to register\n     }\n }\n</code></pre> <ol> <li>Register the Package</li> </ol> <p>In <code>MainApplication.kt</code>, add the HawcxPackage to the list of packages:</p> <p><pre><code> override val reactNativeHost: ReactNativeHost =\n     object : DefaultReactNativeHost(this) {\n     override fun getPackages(): List&lt;ReactPackage&gt; =\n         PackageList(this).packages.apply {\n             // Register the HawcxPackage Package\n             add(HawcxPackage())\n         }\n\n     override fun getJSMainModuleName(): String = \"index\"\n\n     override fun getUseDeveloperSupport(): Boolean = BuildConfig.DEBUG\n\n     override val isNewArchEnabled: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n     override val isHermesEnabled: Boolean = BuildConfig.IS_HERMES_ENABLED\n     }\n</code></pre> 6. Add requirements in <code>android\\app\\src\\main\\AndroidManifest.xml</code></p> <p>You need to add biometric access to the to the <code>AndroidManifest.xml</code> as following:    (you can copy the following xml config or check your config for xmlns:tools, permission, feature, android:supportsRt and tools:replace)</p> <pre><code> &lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:tools=\"http://schemas.android.com/tools\"&gt;\n\n &lt;!-- Permissions required for biometric authentication --&gt;\n &lt;uses-permission android:name=\"android.permission.USE_BIOMETRIC\" /&gt;\n &lt;uses-permission android:name=\"android.permission.USE_FINGERPRINT\" /&gt;\n &lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n\n &lt;!-- Features related to biometrics --&gt;\n &lt;uses-feature\n     android:name=\"android.hardware.fingerprint\"\n     android:required=\"false\" /&gt;\n &lt;uses-feature\n     android:name=\"android.hardware.biometrics\"\n     android:required=\"false\" /&gt;\n\n &lt;application\n     android:name=\".MainApplication\"\n     android:label=\"@string/app_name\"\n     android:icon=\"@mipmap/ic_launcher\"\n     android:allowBackup=\"false\"\n     android:theme=\"@style/AppTheme\"\n     android:supportsRtl=\"true\"\n     tools:replace=\"android:allowBackup, android:theme\"&gt;\n\n     &lt;activity\n     android:name=\".MainActivity\"\n     android:label=\"@string/app_name\"\n     android:configChanges=\"keyboard|keyboardHidden|orientation|screenLayout|screenSize|smallestScreenSize|uiMode\"\n     android:launchMode=\"singleTask\"\n     android:windowSoftInputMode=\"adjustResize\"\n     android:exported=\"true\"&gt;\n     &lt;intent-filter&gt;\n         &lt;action android:name=\"android.intent.action.MAIN\" /&gt;\n         &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;\n     &lt;/intent-filter&gt;\n     &lt;/activity&gt;\n &lt;/application&gt;\n &lt;/manifest&gt;\n</code></pre> <ol> <li>Use HawcxAuth in React Native</li> </ol> <p>Now you can use HawcxAuth in your React Native components:</p> <pre><code> import { NativeModules } from 'react-native';\n\n const { HawcxModule } = NativeModules;\n\n // Example usage\n\n // Check last logged in user\n const SignupScreen: React.FC&lt;Props&gt; = ({ navigation }) =&gt; {\n const [email, setEmail] = useState('');\n const [loading, setLoading] = useState(false);\n\n // Check if a user exists on component mount and trigger biometric login if a user exists\n useEffect(() =&gt; {\n     HawcxModule.checkLastUser()\n     .then((result: string) =&gt; {\n         if (result === 'Biometric login successful') {\n         // Navigate to Home if biometric login is successful\n         navigation.replace('Home');\n         } else if (result === 'SHOW_EMAIL_SIGN_IN_SCREEN') {\n         // If user exists but needs to sign in manually, navigate to the SignIn screen\n         navigation.navigate('SignIn');\n         }\n     })\n     .catch((error: any) =&gt; {\n         console.error('Error checking last user', error);\n     });\n }, []);\n\n const handleSignup = () =&gt; {\n     setLoading(true);\n     // Call the signUp method from HawcxModule\n     HawcxModule.signUp(email)\n     .then(() =&gt; {\n         // Navigate to Verification screen if OTP is successfully generated\n         navigation.navigate('Verification', { email });\n         setLoading(false);\n     })\n     .catch((error: any) =&gt; {\n         // Show an error message if signup fails\n         Alert.alert('Signup Error', error.message || 'An error occurred');\n         setLoading(false);\n     });\n };\n\n return (\n     &lt;View style={styles.container}&gt;\n     &lt;Text&gt;Enter your Email to Sign Up:&lt;/Text&gt;\n     &lt;TextInput\n         style={styles.input}\n         placeholder=\"Email\"\n         value={email}\n         onChangeText={setEmail}\n         keyboardType=\"email-address\"\n     /&gt;\n     &lt;Button title={loading ? 'Signing Up...' : 'Sign Up'} onPress={handleSignup} disabled={loading} /&gt;\n\n     {/* Link to navigate to SignIn Screen */}\n     &lt;TouchableOpacity onPress={() =&gt; navigation.navigate('SignIn')}&gt;\n         &lt;Text style={styles.link}&gt;Already have an account? Sign In&lt;/Text&gt;\n     &lt;/TouchableOpacity&gt;\n     &lt;/View&gt;\n );\n };\n</code></pre>"},{"location":"android/react-integration/#best-practices","title":"Best Practices","text":"<ul> <li>Always handle errors and exceptions from native methods.</li> <li>Use async/await for cleaner code when calling native methods.</li> <li>Implement proper error handling and user feedback in your React Native UI.</li> </ul>"},{"location":"android/template-project/","title":"Start from Template","text":""},{"location":"android/template-project/#starting-from-a-template-project","title":"Starting from a Template Project","text":"<p>Get up and running quickly with our pre-configured Hawcx template project. This approach is perfect for developers who want to start with a solid foundation and best practices already in place.</p>"},{"location":"android/template-project/#prerequisites","title":"Prerequisites","text":"<ul> <li>Android Studio installed on your development machine</li> <li>Git installed on your system</li> </ul>"},{"location":"android/template-project/#steps","title":"Steps","text":"<ol> <li>Clone the Template Repository</li> <li>Open a terminal or command prompt</li> <li> <p>Run the following command:      <pre><code>git clone https://github.com/hawcx/authenticator\n</code></pre></p> </li> <li> <p>Open the Project in Android Studio</p> </li> <li>Launch Android Studio</li> <li>Select \"Open an Existing Project\"</li> <li> <p>Navigate to the cloned repository and select it</p> </li> <li> <p>Rename the Project (Optional)</p> </li> <li>Right-click on the root folder in the Project view</li> <li>Select Refactor &gt; Rename</li> <li>Enter your desired project name</li> <li>Click \"Refactor\"</li> <li> <p>Update the <code>applicationId</code> in your app's <code>build.gradle</code> file to match your new package name</p> </li> <li> <p>Update Configuration</p> </li> <li>Open <code>app/src/main/java/com/hawcx/template/MyApplication.java</code></li> <li> <p>Replace the placeholder API key with your actual Hawcx API key:      <pre><code>HawcxInitializer.getInstance().init(this, \"YOUR_API_KEY_HERE\");\n</code></pre></p> </li> <li> <p>Customize the Template</p> </li> <li>The template includes basic implementations of:<ul> <li>User registration (<code>SignupActivity.java</code>)</li> <li>User login (<code>LoginActivity.java</code>)</li> </ul> </li> <li> <p>Modify these files and add your own business logic as needed</p> </li> <li> <p>Run the Project</p> </li> <li>Connect an Android device or start an emulator</li> <li>Click the \"Run\" button in Android Studio</li> </ol>"},{"location":"android/template-project/#template-structure","title":"Template Structure","text":"<ul> <li><code>app/src/main/java/com/hawcx/template/</code></li> <li><code>MyApplication.java</code>: Application class with HawcxAuth initialization</li> <li><code>MainActivity.java</code>: Main activity demonstrating basic HawcxAuth usage</li> <li><code>LoginActivity.java</code>: Example implementation of secure login</li> <li><code>SignupActivity.java</code>: Example implementation of secure user registration</li> <li><code>SecureStorageManager.java</code>: Utility class for secure data storage</li> <li><code>app/src/main/res/layout/</code></li> <li>XML layout files for activities</li> </ul>"}]}